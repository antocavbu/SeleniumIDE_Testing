// Generated by Selenium IDE

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.AfterEach;
import io.github.bonigarcia.wdm.WebDriverManager;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.support.ui.ExpectedConditions;
import java.time.Duration;
import static org.junit.jupiter.api.Assertions.*;

public class LoginconcarritodecompraTest {
  private WebDriver driver;
  private WebDriverWait wait;
  JavascriptExecutor js;
  
  @BeforeEach
  public void setUp() {
    WebDriverManager.firefoxdriver().setup();
    driver = new FirefoxDriver();
    wait = new WebDriverWait(driver, Duration.ofSeconds(10));
    js = (JavascriptExecutor) driver;
  }
  
  @AfterEach
  public void tearDown() {
    driver.quit();
  }
  @Test
  public void loginconcarritodecompra() {
    // 1. Navegar a la página
    driver.get("https://www.saucedemo.com/");
    driver.manage().window().setSize(new Dimension(1408, 792));
    
    // 2. Login con esperas explícitas y validaciones
    WebElement usernameField = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector("*[data-test=\"username\"]")));
    usernameField.click();
    usernameField.sendKeys("standard_user");
    
    WebElement passwordField = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector("*[data-test=\"password\"]")));
    passwordField.click();
    passwordField.sendKeys("secret_sauce");
    
    WebElement loginButton = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector("*[data-test=\"login-button\"]")));
    loginButton.click();
    
    // Validación: Verificar que el login fue exitoso (aparece el inventario)
    WebElement inventoryContainer = wait.until(ExpectedConditions.presenceOfElementLocated(By.className("inventory_container")));
    assertTrue(inventoryContainer.isDisplayed(), "Login no fue exitoso - No se muestra el inventario");
    
    // 3. Agregar productos al carrito con validaciones
    WebElement bikeLightButton = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector("*[data-test=\"add-to-cart-sauce-labs-bike-light\"]")));
    bikeLightButton.click();
    
    // Validación: Verificar que el botón cambió a "Remove"
    wait.until(ExpectedConditions.textToBe(By.cssSelector("*[data-test=\"remove-sauce-labs-bike-light\"]"), "Remove"));
    
    WebElement tshirtButton = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector("*[data-test=\"add-to-cart-sauce-labs-bolt-t-shirt\"]")));
    tshirtButton.click();
    
    // Validación: Verificar que el contador del carrito muestra 2 items
    WebElement cartBadge = wait.until(ExpectedConditions.presenceOfElementLocated(By.className("shopping_cart_badge")));
    assertEquals("2", cartBadge.getText(), "El carrito no muestra 2 items");
    
    // 4. Ir al carrito
    WebElement cartLink = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector("*[data-test=\"shopping-cart-link\"]")));
    cartLink.click();
    
    // Validación: Verificar que estamos en la página del carrito
    WebElement cartTitle = wait.until(ExpectedConditions.presenceOfElementLocated(By.className("title")));
    assertEquals("Your Cart", cartTitle.getText(), "No se navegó correctamente al carrito");
    
    // 5. Proceder al checkout
    WebElement checkoutButton = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector("*[data-test=\"checkout\"]")));
    checkoutButton.click();
    
    // Validación: Verificar que estamos en la página de información del checkout
    WebElement checkoutTitle = wait.until(ExpectedConditions.presenceOfElementLocated(By.className("title")));
    assertEquals("Checkout: Your Information", checkoutTitle.getText(), "No se navegó correctamente al checkout");
    
    // 6. Llenar información del checkout con validaciones
    WebElement firstNameField = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector("*[data-test=\"firstName\"]")));
    firstNameField.click();
    firstNameField.sendKeys("User");
    
    WebElement lastNameField = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector("*[data-test=\"lastName\"]")));
    lastNameField.click();
    lastNameField.sendKeys("Lastname");
    
    WebElement postalCodeField = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector("*[data-test=\"postalCode\"]")));
    postalCodeField.click();
    postalCodeField.sendKeys("00000000");
    
    WebElement continueButton = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector("*[data-test=\"continue\"]")));
    continueButton.click();
    
    // Validación: Verificar que estamos en la página de resumen
    WebElement summaryTitle = wait.until(ExpectedConditions.presenceOfElementLocated(By.className("title")));
    assertEquals("Checkout: Overview", summaryTitle.getText(), "No se navegó correctamente al resumen");
    
    // 7. Finalizar la compra
    WebElement finishButton = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector("*[data-test=\"finish\"]")));
    finishButton.click();
    
    // Validación final: Verificar que la compra fue completada exitosamente
    WebElement successTitle = wait.until(ExpectedConditions.presenceOfElementLocated(By.className("complete-header")));
    assertEquals("Thank you for your order!", successTitle.getText(), "La compra no se completó exitosamente");
    
    // Validación adicional: Verificar que aparece el mensaje de confirmación
    WebElement confirmationText = wait.until(ExpectedConditions.presenceOfElementLocated(By.className("complete-text")));
    assertTrue(confirmationText.getText().contains("Your order has been dispatched"), "No aparece el mensaje de confirmación esperado");
  }
}
